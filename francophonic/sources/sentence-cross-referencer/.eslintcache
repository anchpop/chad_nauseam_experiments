[{"C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\index.tsx":"1","C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\App.tsx":"2","C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\reportWebVitals.ts":"3"},{"size":517,"mtime":1606249412517,"results":"4","hashOfConfig":"5"},{"size":10503,"mtime":1606616795159,"results":"6","hashOfConfig":"5"},{"size":440,"mtime":1606249412518,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lrc7ey",{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\index.tsx",[],"C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\App.tsx",["15","16","17","18"],"import { promises } from \"fs\";\r\nimport * as React from \"react\";\r\nimport produce, { enableMapSet } from \"immer\";\r\n\r\nimport \"./sakura-vader.css\";\r\nimport \"./App.css\";\r\n\r\nconst yaml = require(\"js-yaml\");\r\nvar classNames = require(\"classnames\");\r\n\r\nenableMapSet();\r\n\r\ntype Indices = number[];\r\n\r\ninterface SentenceRangeNode {\r\n  french: Indices;\r\n  english: { [key: string]: Indices };\r\n  subTree: ParseTree;\r\n}\r\n\r\ntype SentenceRange = SentenceRangeNode;\r\n\r\ninterface Quote {\r\n  element: \"quote\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface Number {\r\n  element: \"number\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface TransitiveVerb {\r\n  element: \"transitive verb\";\r\n  root: SentenceRange;\r\n  subject: SentenceRange;\r\n  directObject: SentenceRange;\r\n  indirectObject?: SentenceRange;\r\n  auxiliary?: SentenceRange;\r\n  modification?: SentenceRange;\r\n}\r\n\r\ninterface IntransitiveVerb {\r\n  element: \"intransitive verb\";\r\n  root: SentenceRange;\r\n  subject: SentenceRange;\r\n  auxiliary?: SentenceRange;\r\n  modification?: SentenceRange;\r\n}\r\n\r\ninterface Preposition {\r\n  element: \"preposition\";\r\n  root: SentenceRange;\r\n  relation?: SentenceRange;\r\n}\r\n\r\ninterface Adverb {\r\n  element: \"adverb\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface Article {\r\n  element: \"article\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface Pronoun {\r\n  element: \"pronoun\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface Noun {\r\n  element: \"noun\";\r\n  root: SentenceRange;\r\n  article?: SentenceRange;\r\n  modification?: SentenceRange;\r\n}\r\n\r\ninterface Adjective {\r\n  element: \"adjective\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface NounPhrase {\r\n  element: \"noun phrase\";\r\n  root: SentenceRange;\r\n}\r\n\r\ninterface Conjunction {\r\n  element: \"conjunction\";\r\n  root: SentenceRange;\r\n  part1: SentenceRange;\r\n  part2: SentenceRange;\r\n}\r\n\r\ninterface Interjection {\r\n  element: \"interjection\";\r\n  root: SentenceRange;\r\n}\r\n\r\ntype ParseItem =\r\n  | Number\r\n  | Quote\r\n  | TransitiveVerb\r\n  | IntransitiveVerb\r\n  | Preposition\r\n  | Adverb\r\n  | Adjective\r\n  | Article\r\n  | Pronoun\r\n  | Noun\r\n  | NounPhrase\r\n  | Conjunction\r\n  | Interjection;\r\n\r\ntype ParseTree = ParseItem[];\r\n\r\ninterface File {\r\n  text: () => string;\r\n}\r\ninterface FileHandle {\r\n  getFile: () => Promise<File>;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    showOpenFilePicker: () => Promise<FileHandle[]>;\r\n  }\r\n}\r\n\r\ninterface Token {\r\n  text: string;\r\n  whitespace: string;\r\n  pos: string;\r\n}\r\n\r\ninterface SentenceInfo {\r\n  tokens_fr: Token[];\r\n  tokens_en: {\r\n    [key: string]: Token[];\r\n  };\r\n}\r\n\r\ninterface Sentences {\r\n  [key: string]: SentenceInfo;\r\n}\r\n\r\ninterface AppStateLoaded {\r\n  nlpFileLoaded: true;\r\n  nlpFileHandle: FileHandle;\r\n  sentencesToAssociate: Sentences;\r\n  currentSentenceString: string;\r\n  parseTrees: { [key: string]: ParseTree };\r\n  selectedTokens: {\r\n    english: {\r\n      [k: string]: number[];\r\n    };\r\n    french: number[];\r\n  };\r\n}\r\n\r\ninterface AppStateUnloaded {\r\n  nlpFileLoaded: false;\r\n}\r\n\r\ntype AppState = AppStateLoaded | AppStateUnloaded;\r\n\r\nconst startingAppState: AppStateUnloaded = { nlpFileLoaded: false };\r\n\r\nconst saveFile = async () => {\r\n  const options = {\r\n    types: [\r\n      {\r\n        description: \"Text Files\",\r\n        accept: {\r\n          \"text/plain\": [\".yaml\"],\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  const handle = await (window as any).showSaveFilePicker(options);\r\n  return handle;\r\n};\r\n\r\nconst range = (from: number, to: number) => {\r\n  const [start, end] = [from, to].sort();\r\n  const arr = Array.from(new Array(end - start), (x, i) => start + i);\r\n  if (from > to) {\r\n    return arr.reverse();\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst initializeParseTree = (\r\n  sentence: string,\r\n  { tokens_fr, tokens_en }: SentenceInfo\r\n): { [key: string]: ParseTree } =>\r\n  tokens_fr.filter(({ text }) => text === '\"').length === 2 &&\r\n    tokens_fr[0].text === '\"' &&\r\n    tokens_fr[tokens_fr.length - 1].text === '\"'\r\n    ? {\r\n      [sentence]: [\r\n        {\r\n          element: \"quote\",\r\n          root: {\r\n            french: range(0, tokens_fr.length),\r\n            english: Object.fromEntries(\r\n              Object.entries(tokens_en).map(([sentence, tokens]) => [\r\n                sentence,\r\n                range(0, tokens.length),\r\n              ]),\r\n            ),\r\n            subTree: []\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    : { [sentence]: [] };\r\n\r\nconst analyzeNlpFile = async (\r\n  appState: AppState,\r\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>\r\n) => {\r\n  const [nlpFileHandle] = await window.showOpenFilePicker();\r\n  const file = await nlpFileHandle.getFile();\r\n  const contents = await file.text();\r\n  const sentencesToAssociate: Sentences = yaml.safeLoad(contents);\r\n\r\n  const currentSentenceString: string = Object.keys(sentencesToAssociate)[0];\r\n\r\n  const selectedTokens = {\r\n    english: Object.fromEntries(\r\n      Object.keys(\r\n        sentencesToAssociate[currentSentenceString].tokens_en\r\n      ).map((k) => [k, [] as number[]])\r\n    ),\r\n    french: [] as number[],\r\n  };\r\n\r\n  const currentSentenceTokensFr =\r\n    sentencesToAssociate[currentSentenceString].tokens_fr;\r\n  const currentSentenceTokensEn =\r\n    sentencesToAssociate[currentSentenceString].tokens_en;\r\n\r\n  // Initialize the parse tree to be a quote if it seems like that's what this is\r\n  const parseTrees: { [key: string]: ParseTree } = Object.entries(\r\n    sentencesToAssociate\r\n  )\r\n    .map(([sentence, info]) => initializeParseTree(sentence, info))\r\n    .reduce((x, acc) => ({ ...x, ...acc }));\r\n\r\n  var newState: AppStateLoaded = {\r\n    ...appState,\r\n    nlpFileLoaded: true,\r\n    nlpFileHandle,\r\n    sentencesToAssociate,\r\n    currentSentenceString,\r\n    selectedTokens,\r\n    parseTrees,\r\n  };\r\n\r\n  setAppState(newState);\r\n};\r\n\r\nconst toggleTokens = (index: number, shift: boolean, tokens: number[]) => {\r\n  const tokensToSelect =\r\n    shift && tokens.length > 0\r\n      ? range(tokens[tokens.length - 1] + 1, index + 1)\r\n      : [index];\r\n\r\n  tokensToSelect.forEach((currentIndex) => {\r\n    if (tokens.includes(currentIndex)) {\r\n      tokens = tokens.filter((i) => i !== currentIndex);\r\n    } else {\r\n      tokens.push(currentIndex);\r\n    }\r\n  });\r\n  return tokens;\r\n};\r\n\r\nconst toggleSelectFrenchToken = (\r\n  index: number,\r\n  shift: boolean,\r\n  appState: AppStateLoaded,\r\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>\r\n) => {\r\n  setAppState(\r\n    produce(appState, (draftState: AppStateLoaded) => {\r\n      draftState.selectedTokens.french = toggleTokens(\r\n        index,\r\n        shift,\r\n        draftState.selectedTokens.french\r\n      );\r\n    })\r\n  );\r\n};\r\n\r\nconst toggleSelectEnglishToken = (\r\n  sentence: string,\r\n  index: number,\r\n  shift: boolean,\r\n  appState: AppStateLoaded,\r\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>\r\n) => {\r\n  setAppState(\r\n    produce(appState, (draftState: AppStateLoaded) => {\r\n      draftState.selectedTokens.english[sentence] = toggleTokens(\r\n        index,\r\n        shift,\r\n        draftState.selectedTokens.english[sentence]\r\n      );\r\n    })\r\n  );\r\n};\r\n\r\nconst TokenButtons = ({ sentenceTokens, selectedTokens, toggleSelect }:\r\n  {\r\n    sentenceTokens: Token[],\r\n    selectedTokens: number[],\r\n    toggleSelect: (index: number, shift: boolean) => void,\r\n  }\r\n): JSX.Element =>\r\n  <div>\r\n    <p>\r\n      {sentenceTokens.map(\r\n        ({ text, pos }, index) => (\r\n          <button\r\n            key={index}\r\n            className={classNames(\"french\", pos.toLocaleLowerCase(), \"token\", {\r\n              selected: selectedTokens.includes(index),\r\n            })}\r\n            onClick={(e) =>\r\n              toggleSelect(index, e.shiftKey)\r\n            }\r\n          >\r\n            {text}\r\n          </button>\r\n        )\r\n      )}</p></div>;\r\n\r\n\r\nconst SubParse = ({ sentence, node }: { sentence: SentenceInfo, node: SentenceRangeNode }): JSX.Element => {\r\n  if (node.subTree.length === 0) {\r\n    return <span>{node.french.map(index => <span key={index}>{sentence.tokens_fr[index].text} {' '}</span>)}</span>\r\n  }\r\n  else {\r\n    return <ViewParseTree tree={node.subTree} sentence={sentence} />\r\n  }\r\n}\r\n\r\nconst ViewParseTree = ({ sentence, tree }: { sentence: SentenceInfo, tree: ParseTree }): JSX.Element => <div>{tree.map((parseItem, index) => {\r\n  if (parseItem.element === \"quote\") {\r\n    const { root } = parseItem;\r\n    return (<div key={index} className=\"Parse-item\">\r\n      Quote: <div className=\"Subparse\"><SubParse sentence={sentence} node={root} /></div>\r\n    </div>)\r\n  }\r\n  return <></>\r\n})}</div>\r\n\r\nconst App = () => {\r\n  const [appState, setAppState] = React.useState<AppState>(startingAppState);\r\n\r\n  if (appState.nlpFileLoaded) {\r\n    console.log(appState.parseTrees);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Main-container\">\r\n        <button\r\n          onClick={async () => await analyzeNlpFile(appState, setAppState)}\r\n          id=\"But-get-nlp\"\r\n        >\r\n          {appState.nlpFileLoaded ? \"NLP File Loaded\" : \"Load NLP File\"}\r\n        </button>\r\n\r\n        {appState.nlpFileLoaded ? (\r\n          <>\r\n\r\n            <TokenButtons toggleSelect={(index, shift) => toggleSelectFrenchToken(index, shift, appState, setAppState)} sentenceTokens={appState.sentencesToAssociate[appState.currentSentenceString].tokens_fr} selectedTokens={appState.selectedTokens.french} />\r\n\r\n            {Object.entries(appState.sentencesToAssociate[appState.currentSentenceString].tokens_en).map(([sentence, tokens]) =>\r\n              <TokenButtons toggleSelect={(index, shift) => toggleSelectEnglishToken(sentence, index, shift, appState, setAppState)} sentenceTokens={tokens} selectedTokens={appState.selectedTokens.english[sentence]} />\r\n            )}\r\n\r\n            <div className=\"Parse-area\">\r\n              <ViewParseTree sentence={appState.sentencesToAssociate[appState.currentSentenceString]} tree={appState.parseTrees[appState.currentSentenceString]} />\r\n            </div>\r\n          </>\r\n        ) : (\r\n            <></>\r\n          )}\r\n      </div>\r\n      {appState.nlpFileLoaded === true ? (\r\n        Object.entries(appState.sentencesToAssociate).map(\r\n          ([frenchSentence, info]) => (\r\n            <p key={frenchSentence}>\r\n              {info.tokens_fr.map(({ text }, index) => (\r\n                <span\r\n                  key={frenchSentence + index}\r\n                  className={classNames(\"french\", \"token\")}\r\n                >\r\n                  {text}\r\n                </span>\r\n              ))}\r\n            </p>\r\n          )\r\n        )\r\n      ) : (\r\n          <></>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\hyper\\dev\\chad_nauseam\\chad_nauseam_experiments\\francophonic\\sources\\sentence-cross-referencer\\src\\reportWebVitals.ts",[],{"ruleId":"19","severity":1,"message":"20","line":1,"column":10,"nodeType":"21","messageId":"22","endLine":1,"endColumn":18},{"ruleId":"19","severity":1,"message":"23","line":170,"column":7,"nodeType":"21","messageId":"22","endLine":170,"endColumn":15},{"ruleId":"19","severity":1,"message":"24","line":240,"column":9,"nodeType":"21","messageId":"22","endLine":240,"endColumn":32},{"ruleId":"19","severity":1,"message":"25","line":242,"column":9,"nodeType":"21","messageId":"22","endLine":242,"endColumn":32},"@typescript-eslint/no-unused-vars","'promises' is defined but never used.","Identifier","unusedVar","'saveFile' is assigned a value but never used.","'currentSentenceTokensFr' is assigned a value but never used.","'currentSentenceTokensEn' is assigned a value but never used."]